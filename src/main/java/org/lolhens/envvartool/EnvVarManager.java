package org.lolhens.envvartool;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import com.sun.jna.platform.win32.Advapi32Util;
import com.sun.jna.platform.win32.WinNT;

import javax.swing.*;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import java.awt.*;
import java.util.HashMap;
import java.util.Map;

import static com.sun.jna.platform.win32.WinReg.HKEY_LOCAL_MACHINE;

/**
 * Created by LolHens on 09.12.2014.
 */
public class EnvVarManager extends JFrame {
    private JPanel contentPane;
    private JList lstEnvVars;
    private JButton btnDelete;
    private JButton btnEdit;
    private JTextField txtValue;
    private JButton btnValue;
    private JButton btnAdd;
    private JPanel panelValue;
    private JButton btnReload;
    private JCheckBox ckValueExp;

    private DefaultListModel<String> lstModelEnvVars = new DefaultListModel<>();
    private Map<JComponent, Integer> componentState = new HashMap<>();

    public EnvVarManager() {
        super(("EnvVarTool v" + Main.version + " - Environment Variable Manager"));

        setContentPane(contentPane);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        lstEnvVars.setModel(lstModelEnvVars);

        setState(false, btnDelete, btnEdit, txtValue, ckValueExp, btnValue);

        reload();

        lstEnvVars.addListSelectionListener((e) -> {
            int index = lstEnvVars.getSelectedIndex();
            if (!txtValue.isEnabled()) setState(index > -1 && lstModelEnvVars.get(index) != null, btnEdit, btnDelete);
        });

        btnReload.addActionListener((e) -> reload());
        btnAdd.addActionListener((e) -> {
            setState(false, btnReload, btnAdd, btnDelete, btnEdit);
            setState(true, txtValue, ckValueExp);
        });
        btnDelete.addActionListener((e) -> {
            int index = lstEnvVars.getSelectedIndex();
            if (index > -1) {
                lstEnvVars.setSelectedIndex(-1);
                String value = lstModelEnvVars.get(index);
                Advapi32Util.registryDeleteValue(HKEY_LOCAL_MACHINE, Main.envVarPath, value);

                lstModelEnvVars.remove(index);
            }
        });
        btnEdit.addActionListener((e) -> {
            int index = lstEnvVars.getSelectedIndex();
            if (index > -1) {
                new EnvVarEditor(lstModelEnvVars.get(index));
            }
        });

        btnValue.addActionListener((e) -> {
            String value = txtValue.getText();
            boolean exp = ckValueExp.isSelected();

            Advapi32UtilExt.registrySetValue(HKEY_LOCAL_MACHINE, Main.envVarPath, value, "", exp ? WinNT.REG_EXPAND_SZ : WinNT.REG_SZ);

            int index = lstModelEnvVars.size();
            lstModelEnvVars.add(index, value);

            txtValue.setText("");
            ckValueExp.setSelected(false);
            setState(true, btnReload, btnAdd);
            setState(false, txtValue, ckValueExp, btnValue);
            int selIndex = lstEnvVars.getSelectedIndex();
            if (selIndex > -1 && lstModelEnvVars.get(selIndex) != null) setState(true, btnEdit, btnDelete);
        });
        txtValue.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                if (!txtValue.getText().equals("") && !btnValue.isEnabled()) setState(true, btnValue);
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                if (txtValue.getText().equals("") && btnValue.isEnabled()) setState(false, btnValue);
            }

            @Override
            public void changedUpdate(DocumentEvent e) {

            }
        });

        pack();
        setVisible(true);
    }

    private void reload() {
        lstModelEnvVars.clear();
        for (String key : Advapi32Util.registryGetValues(HKEY_LOCAL_MACHINE, Main.envVarPath).keySet()) {
            lstModelEnvVars.addElement(key);
        }
    }

    private void setState(boolean value, JComponent... components) {
        for (JComponent component : components) {
            int state;
            if (!componentState.containsKey(component))
                state = value ? 0 : 1;
            else
                state = componentState.get(component);
            if ((state == 0 && value) || (state == 1 && !value)) component.setEnabled(value);
            state += (value ? 1 : -1);
            if (state > 1) state = 1;
            else if (state < 0) state = 0;
            componentState.put(component, state);
        }
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPane = new JPanel();
        contentPane.setLayout(new GridLayoutManager(2, 6, new Insets(0, 0, 0, 0), -1, -1));
        final JScrollPane scrollPane1 = new JScrollPane();
        contentPane.add(scrollPane1, new GridConstraints(0, 0, 1, 6, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        lstEnvVars = new JList();
        scrollPane1.setViewportView(lstEnvVars);
        btnReload = new JButton();
        btnReload.setIcon(new ImageIcon(getClass().getResource("/renew.png")));
        btnReload.setText("");
        contentPane.add(btnReload, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_NORTHWEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, new Dimension(30, -1), new Dimension(30, -1), new Dimension(30, -1), 0, false));
        btnAdd = new JButton();
        btnAdd.setIcon(new ImageIcon(getClass().getResource("/add.png")));
        btnAdd.setText("");
        contentPane.add(btnAdd, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_NORTHWEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, new Dimension(30, -1), new Dimension(30, -1), new Dimension(30, -1), 0, false));
        btnDelete = new JButton();
        btnDelete.setHorizontalAlignment(0);
        btnDelete.setIcon(new ImageIcon(getClass().getResource("/delete.png")));
        btnDelete.setText("");
        contentPane.add(btnDelete, new GridConstraints(1, 2, 1, 1, GridConstraints.ANCHOR_NORTHWEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, new Dimension(30, -1), new Dimension(30, -1), new Dimension(30, -1), 0, false));
        btnEdit = new JButton();
        btnEdit.setHorizontalAlignment(0);
        btnEdit.setHorizontalTextPosition(11);
        btnEdit.setIcon(new ImageIcon(getClass().getResource("/edit.png")));
        btnEdit.setText("");
        contentPane.add(btnEdit, new GridConstraints(1, 3, 1, 1, GridConstraints.ANCHOR_NORTHWEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, new Dimension(30, -1), new Dimension(30, -1), new Dimension(30, -1), 0, false));
        final Spacer spacer1 = new Spacer();
        contentPane.add(spacer1, new GridConstraints(1, 4, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        panelValue = new JPanel();
        panelValue.setLayout(new GridLayoutManager(1, 3, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(panelValue, new GridConstraints(1, 5, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panelValue.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), null));
        txtValue = new JTextField();
        panelValue.add(txtValue, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        btnValue = new JButton();
        btnValue.setEnabled(true);
        btnValue.setIcon(new ImageIcon(getClass().getResource("/ok.png")));
        btnValue.setText("");
        panelValue.add(btnValue, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_NORTH, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        ckValueExp = new JCheckBox();
        ckValueExp.setText("Contains EnvVars");
        panelValue.add(ckValueExp, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }
}
